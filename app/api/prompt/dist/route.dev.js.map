{"version":3,"sources":["route.js"],"names":["GET","request","Prompt","find","populate","prompts","Response","JSON","stringify","status"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEO,IAAMA,GAAG,GAAG,SAANA,GAAM,CAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAET,4BAFS;;AAAA;AAAA;AAAA,0CAIOC,mBAAOC,IAAP,CAAY,EAAZ,EAAgBC,QAAhB,CAAyB,SAAzB,CAJP;;AAAA;AAITC,UAAAA,OAJS;AAAA,2CAOR,IAAIC,QAAJ,CAAaC,IAAI,CAACC,SAAL,CAAeH,OAAf,CAAb,EAAsC;AAC3CI,YAAAA,MAAM,EAAE;AADmC,WAAtC,CAPQ;;AAAA;AAAA;AAAA;AAAA,2CAWR,IAAIH,QAAJ,CAAa,6BAAb,EAA4C;AACjDG,YAAAA,MAAM,EAAE;AADyC,WAA5C,CAXQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAZ","sourcesContent":["import Prompt from \"@models/prompt\";\r\nimport { connectToDB } from \"@utils/database\";\r\n\r\nexport const GET = async (request) => {\r\n  try {\r\n    await connectToDB();\r\n\r\n    const prompts = await Prompt.find({}).populate(\"creator\");\r\n    // if (!prompts) return new Response(\"Prompt not found\", { status: 404 });\r\n\r\n    return new Response(JSON.stringify(prompts), {\r\n      status: 200,\r\n    });\r\n  } catch (error) {\r\n    return new Response(\"Failed to fetch all prompts\", {\r\n      status: 500,\r\n    });\r\n  }\r\n};\r\n"],"file":"route.dev.js"}